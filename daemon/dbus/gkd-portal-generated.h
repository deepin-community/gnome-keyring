/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef _____DAEMON_DBUS_GKD_PORTAL_GENERATED_H__
#define _____DAEMON_DBUS_GKD_PORTAL_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Secret */

#define GKD_TYPE_EXPORTED_PORTAL (gkd_exported_portal_get_type ())
#define GKD_EXPORTED_PORTAL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PORTAL, GkdExportedPortal))
#define GKD_IS_EXPORTED_PORTAL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PORTAL))
#define GKD_EXPORTED_PORTAL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GKD_TYPE_EXPORTED_PORTAL, GkdExportedPortalIface))

struct _GkdExportedPortal;
typedef struct _GkdExportedPortal GkdExportedPortal;
typedef struct _GkdExportedPortalIface GkdExportedPortalIface;

struct _GkdExportedPortalIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_retrieve_secret) (
    GkdExportedPortal *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    GVariant *arg_fd,
    GVariant *arg_options);

  guint  (*get_version) (GkdExportedPortal *object);

};

GType gkd_exported_portal_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gkd_exported_portal_interface_info (void);
guint gkd_exported_portal_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gkd_exported_portal_complete_retrieve_secret (
    GkdExportedPortal *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    guint response,
    GVariant *results);



/* D-Bus method calls: */
void gkd_exported_portal_call_retrieve_secret (
    GkdExportedPortal *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    GVariant *arg_fd,
    GVariant *arg_options,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_portal_call_retrieve_secret_finish (
    GkdExportedPortal *proxy,
    guint *out_response,
    GVariant **out_results,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_portal_call_retrieve_secret_sync (
    GkdExportedPortal *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    GVariant *arg_fd,
    GVariant *arg_options,
    GUnixFDList  *fd_list,
    guint *out_response,
    GVariant **out_results,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint gkd_exported_portal_get_version (GkdExportedPortal *object);
void gkd_exported_portal_set_version (GkdExportedPortal *object, guint value);


/* ---- */

#define GKD_TYPE_EXPORTED_PORTAL_PROXY (gkd_exported_portal_proxy_get_type ())
#define GKD_EXPORTED_PORTAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PORTAL_PROXY, GkdExportedPortalProxy))
#define GKD_EXPORTED_PORTAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_PORTAL_PROXY, GkdExportedPortalProxyClass))
#define GKD_EXPORTED_PORTAL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_PORTAL_PROXY, GkdExportedPortalProxyClass))
#define GKD_IS_EXPORTED_PORTAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PORTAL_PROXY))
#define GKD_IS_EXPORTED_PORTAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_PORTAL_PROXY))

typedef struct _GkdExportedPortalProxy GkdExportedPortalProxy;
typedef struct _GkdExportedPortalProxyClass GkdExportedPortalProxyClass;
typedef struct _GkdExportedPortalProxyPrivate GkdExportedPortalProxyPrivate;

struct _GkdExportedPortalProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GkdExportedPortalProxyPrivate *priv;
};

struct _GkdExportedPortalProxyClass
{
  GDBusProxyClass parent_class;
};

GType gkd_exported_portal_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedPortalProxy, g_object_unref)
#endif

void gkd_exported_portal_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedPortal *gkd_exported_portal_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedPortal *gkd_exported_portal_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gkd_exported_portal_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedPortal *gkd_exported_portal_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedPortal *gkd_exported_portal_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GKD_TYPE_EXPORTED_PORTAL_SKELETON (gkd_exported_portal_skeleton_get_type ())
#define GKD_EXPORTED_PORTAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PORTAL_SKELETON, GkdExportedPortalSkeleton))
#define GKD_EXPORTED_PORTAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_PORTAL_SKELETON, GkdExportedPortalSkeletonClass))
#define GKD_EXPORTED_PORTAL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_PORTAL_SKELETON, GkdExportedPortalSkeletonClass))
#define GKD_IS_EXPORTED_PORTAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PORTAL_SKELETON))
#define GKD_IS_EXPORTED_PORTAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_PORTAL_SKELETON))

typedef struct _GkdExportedPortalSkeleton GkdExportedPortalSkeleton;
typedef struct _GkdExportedPortalSkeletonClass GkdExportedPortalSkeletonClass;
typedef struct _GkdExportedPortalSkeletonPrivate GkdExportedPortalSkeletonPrivate;

struct _GkdExportedPortalSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GkdExportedPortalSkeletonPrivate *priv;
};

struct _GkdExportedPortalSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gkd_exported_portal_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedPortalSkeleton, g_object_unref)
#endif

GkdExportedPortal *gkd_exported_portal_skeleton_new (void);


G_END_DECLS

#endif /* _____DAEMON_DBUS_GKD_PORTAL_GENERATED_H__ */
