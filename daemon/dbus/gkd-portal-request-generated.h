/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef _____DAEMON_DBUS_GKD_PORTAL_REQUEST_GENERATED_H__
#define _____DAEMON_DBUS_GKD_PORTAL_REQUEST_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Request */

#define GKD_TYPE_EXPORTED_PORTAL_REQUEST (gkd_exported_portal_request_get_type ())
#define GKD_EXPORTED_PORTAL_REQUEST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST, GkdExportedPortalRequest))
#define GKD_IS_EXPORTED_PORTAL_REQUEST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST))
#define GKD_EXPORTED_PORTAL_REQUEST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST, GkdExportedPortalRequestIface))

struct _GkdExportedPortalRequest;
typedef struct _GkdExportedPortalRequest GkdExportedPortalRequest;
typedef struct _GkdExportedPortalRequestIface GkdExportedPortalRequestIface;

struct _GkdExportedPortalRequestIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_close) (
    GkdExportedPortalRequest *object,
    GDBusMethodInvocation *invocation);

};

GType gkd_exported_portal_request_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gkd_exported_portal_request_interface_info (void);
guint gkd_exported_portal_request_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gkd_exported_portal_request_complete_close (
    GkdExportedPortalRequest *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gkd_exported_portal_request_call_close (
    GkdExportedPortalRequest *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_portal_request_call_close_finish (
    GkdExportedPortalRequest *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_portal_request_call_close_sync (
    GkdExportedPortalRequest *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GKD_TYPE_EXPORTED_PORTAL_REQUEST_PROXY (gkd_exported_portal_request_proxy_get_type ())
#define GKD_EXPORTED_PORTAL_REQUEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST_PROXY, GkdExportedPortalRequestProxy))
#define GKD_EXPORTED_PORTAL_REQUEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_PORTAL_REQUEST_PROXY, GkdExportedPortalRequestProxyClass))
#define GKD_EXPORTED_PORTAL_REQUEST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST_PROXY, GkdExportedPortalRequestProxyClass))
#define GKD_IS_EXPORTED_PORTAL_REQUEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST_PROXY))
#define GKD_IS_EXPORTED_PORTAL_REQUEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_PORTAL_REQUEST_PROXY))

typedef struct _GkdExportedPortalRequestProxy GkdExportedPortalRequestProxy;
typedef struct _GkdExportedPortalRequestProxyClass GkdExportedPortalRequestProxyClass;
typedef struct _GkdExportedPortalRequestProxyPrivate GkdExportedPortalRequestProxyPrivate;

struct _GkdExportedPortalRequestProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GkdExportedPortalRequestProxyPrivate *priv;
};

struct _GkdExportedPortalRequestProxyClass
{
  GDBusProxyClass parent_class;
};

GType gkd_exported_portal_request_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedPortalRequestProxy, g_object_unref)
#endif

void gkd_exported_portal_request_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedPortalRequest *gkd_exported_portal_request_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedPortalRequest *gkd_exported_portal_request_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gkd_exported_portal_request_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedPortalRequest *gkd_exported_portal_request_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedPortalRequest *gkd_exported_portal_request_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GKD_TYPE_EXPORTED_PORTAL_REQUEST_SKELETON (gkd_exported_portal_request_skeleton_get_type ())
#define GKD_EXPORTED_PORTAL_REQUEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST_SKELETON, GkdExportedPortalRequestSkeleton))
#define GKD_EXPORTED_PORTAL_REQUEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_PORTAL_REQUEST_SKELETON, GkdExportedPortalRequestSkeletonClass))
#define GKD_EXPORTED_PORTAL_REQUEST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST_SKELETON, GkdExportedPortalRequestSkeletonClass))
#define GKD_IS_EXPORTED_PORTAL_REQUEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PORTAL_REQUEST_SKELETON))
#define GKD_IS_EXPORTED_PORTAL_REQUEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_PORTAL_REQUEST_SKELETON))

typedef struct _GkdExportedPortalRequestSkeleton GkdExportedPortalRequestSkeleton;
typedef struct _GkdExportedPortalRequestSkeletonClass GkdExportedPortalRequestSkeletonClass;
typedef struct _GkdExportedPortalRequestSkeletonPrivate GkdExportedPortalRequestSkeletonPrivate;

struct _GkdExportedPortalRequestSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GkdExportedPortalRequestSkeletonPrivate *priv;
};

struct _GkdExportedPortalRequestSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gkd_exported_portal_request_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedPortalRequestSkeleton, g_object_unref)
#endif

GkdExportedPortalRequest *gkd_exported_portal_request_skeleton_new (void);


G_END_DECLS

#endif /* _____DAEMON_DBUS_GKD_PORTAL_REQUEST_GENERATED_H__ */
